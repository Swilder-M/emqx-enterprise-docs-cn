
.. _changes:

==================
版本发布 (Changes)
==================

.. _release_3.0.0:

----------
3.0.0 版本
----------

*发布日期: 2019-01-18*

3.0.0 版本正式发布。向下兼容 MQTT-3 (3.1 & 3.1.1) 协议的同时，完整支持 MQTT-5.0 协议。
此外还增加了很多实用的功能特性，重构了核心组件，提升了系统的伸缩性和扩展能力。

全面支持 MQTT-5.0
-----------------

- 会话过期机制

  MQTT 3 中的清理会话标志现在被拆分成了新开始标志和会话过期间隔。

- 消息过期机制

  允许消息在发布时设置一个过期间隔。

- 所有的响应报文都可携带原因码

  所有的响应报文都包含了原因码，这允许调用方确定所请求的函数是否成功。

- 所有的响应报文都可携带原因字符串

  除原因码以外，所有的响应报文还可包含原因字符串。

- 服务端主动断开

  允许服务端发送 DISCONNECT 报文，以指示连接被关闭的原因。

- 请求/响应

  在协议层面支持请求/响应模式的应用。

- 共享订阅

  EMQ X 2.x 支持单节点的共享订阅。现在 EMQ X 3.0 支持了整个集群范围内的共享订阅。

- 订阅标识符

  允许在 SUBSCRIBE 报文中指定一个数字订阅标识符，并在消息分发时返回此标识符。这使得客户端收到分发的消息时确定此消息是由哪个或哪些订阅导致的。

- 主题别名

  通过将主题名缩写为小整数来减小MQTT报文的开销大小。客户端和服务端分别指定它们允许的主题别名的数量。

- 用户属性

  现在大多数报文支持携带用户属性

- 最大报文长度

  允许客户端和服务端各自指定它们支持的最大报文长度。会话参与方发送更大的报文将造成错误。

- 订阅选项

  提供主要用于定义允许消息桥接应用的订阅选项。包括不要把消息发送给消息源客户端（非本地）的选项和订阅时处理保留消息的选项。

- 遗嘱延迟

  允许指定一个时延，定义从连接断开到遗嘱消息被发送出去之间的延时。这样可以避免在短暂的网络断开和波动时发出遗嘱消息。

- 由服务端指定保活时间

  允许服务端指定它期望客户端使用的保活时间。

- 由服务端分配 ClientID

  允许由服务器分配 ClientID，并将分配的 ClientID 返回被客户端。

集群架构演进
------------
EQMX 3.0 引入了伸缩性较强的 RPC 机制，现在单集群可以支持千万级别的并发连接:

::

     --------               --------
    |  EMQX  |<--- MQTT--->|  EMQX  |
    |--------|             |--------|
    |  Ekka  |<----RPC---->|  Ekka  |
    |--------|             |--------|
    | Mnesia |<--Cluster-->| Mnesia |
    |--------|             |--------|
    | Kernel |<----TCP---->| Kernel |
     --------               --------

- 引入 Ekka 以实现集群的自动建立和自动恢复。目前支持以下几种集群建立方式:

  - manual: 手动加入集群

  - static: 使用预置的节点列表自动组建集群

  - mcast:  使用广播自动建立集群

  - dns:  使用 DNS A 记录自动建立集群

  - etcd: 使用 etcd 自动建立集群

  - k8s:  使用 k8s 自动建立集群

- 引入可扩展 RPC 来缓解节点间的网络拥塞，降低网络分裂的风险

消息速率限制
------------
3.0 引入了消息速率限制，以增加 Broker 的可靠性。在 MQTT TCP 或 SSL 监听器配置里，可以配置:

- 并发连接数量: max_clients

- 连接速率限制: max_conn_rate

- 连接流量限制: rate_limit

- 发布速率限制: max_publish_rate

功能改进与错误修复
------------------

- 更新 esockd

- 改用 cowboy 以提升 HTTP 连接的性能

- 重构 ACL 缓存机制

- 增加本地和远程 MQTT 桥接功能

- 配置文件引入 zone 的概念，不同的 zone 可以使用不同的配置

- 重构 session 模块，减少节点间的内存拷贝，提升节点间通信效率

- 改进 OpenLDAP 的访问控制

- 增加延时发布功能

- 支持 Prometheus

- 改进 hook 机制

- 支持存储 QoS 为 0 的消息

- 优化客户端批量下线时的性能
